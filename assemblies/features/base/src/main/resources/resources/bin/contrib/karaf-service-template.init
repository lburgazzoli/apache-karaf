#!/bin/sh
#    Licensed to the Apache Software Foundation (ASF) under one or more
#    contributor license agreements.  See the NOTICE file distributed with
#    this work for additional information regarding copyright ownership.
#    The ASF licenses this file to You under the Apache License, Version 2.0
#    (the "License"); you may not use this file except in compliance with
#    the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# Karaf control script
# description: Karaf startup script
# processname: ${KARAF_SERVICE_NAME}
# pidfile: ${KARAF_SERVICE_PIDFILE}
# config: ${KARAF_SERVICE_CONF}
#
if [ -r "${KARAF_SERVICE_CONF}" ]; then
    set -o allexport
    . "${KARAF_SERVICE_CONF}"
    set +o allexport
else
    echo "Error KARAF_SERVICE_CONF not defined"
    exit -1
fi

# Location of JDK
if [ -n "$JAVA_HOME" ]; then
    export JAVA_HOME
fi

# Setup the JVM
if [ -z "$JAVA" ]; then
    if [ -n "$JAVA_HOME" ]; then
        JAVA="$JAVA_HOME/bin/java"
    else
        JAVA="java"
    fi
fi

if [ -z "$STARTUP_WAIT" ]; then
    STARTUP_WAIT=30
fi

if [ -z "$SHUTDOWN_WAIT" ]; then
    SHUTDOWN_WAIT=30
fi

do_check_status() {
    if [ -f "$KARAF_SERVICE_PIDFILE" ]; then
        read ppid < "$KARAF_SERVICE_PIDFILE"
        if [ `ps -p $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
            return 0
        else
            return 1
        fi
    fi

    return 3
}

do_start() {
    echo -n "Starting $KARAF_SERVICE_NAME: "

    do_check_status
    status_start=$?

    if [ $status_start -eq 3 ]; then

        # Console log
        LOG_PATH=$(dirname "$KARAF_SERVICE_LOG")
        if [ ! -d "$LOG_PATH" ]; then
            mkdir -p "$LOG_PATH"

            chown $KARAF_SERVICE_USER:$KARAF_SERVICE_GROUP "$LOG_PATH"
            chown $KARAF_SERVICE_USER:$KARAF_SERVICE_GROUP "$KARAF_SERVICE_LOG"
        fi

        if [ ! -z "$KARAF_SERVICE_USER" ]; then
            if [ "$KARAF_SERVICE_USER" = "root" ]; then
                KARAF_EXEC=exec 
                export KARAF_EXEC

                JAVA_HOME=$JAVA_HOME 
                export JAVA_HOME

                "$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_START_COMMAND"
            else
                su - $KARAF_SERVICE_USER \
                    -c " export JAVA_HOME=$JAVA_HOME; \"$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_START_COMMAND\""
            fi

            let count=0
            let kwait=$STARTUP_WAIT

            # Waith untill the process has been started, max STARTUP_WAIT seconds
            while [ $count -lt $kwait ]; do
                do_check_status
                status_start=$?

                if [ $status_start -eq 3 ]; then
                    sleep 1
                    let count=$count+1;
                elif [ $status_start -eq 0 ]; then
                    echo -n "OK"
                    echo
                    exit 0
                fi
            done

            do_check_status
            status_start=$?

            if [ $status_start -eq 0 ]; then
                echo "$KARAF_SERVICE_NAME hasn't started within the timeout allowed."
                echo
                exit 0
            else
                echo "$KARAF_SERVICE_NAME failed to start within the timeout allowed."
                echo
                exit 1
            fi         
        fi
    else 
        $0 status
    fi
}

do_stop() {
    echo -n "Stopping $KARAF_SERVICE_NAME: "

    do_check_status
    status_stop=$?

    if [ $status_stop -eq 0 ]; then
        read kpid < "$KARAF_SERVICE_PIDFILE"

        let count=0
        let kwait=$SHUTDOWN_WAIT

        if [ "$KARAF_SERVICE_USER" = "root" ]; then
            JAVA_HOME=$JAVA_HOME
            export JAVA_HOME

            "$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_STOP_COMMAND" > /dev/null 2>&1
        else
            su - $KARAF_SERVICE_USER \
                -c "export JAVA_HOME=$JAVA_HOME; \"$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_STOP_COMMAND\"" \
            > /dev/null 2>&1
        fi 

        until [ $status_stop -eq 0 ] && [ $count -lt $kwait ]; do
            do_check_status
            status_stop=$?

            if [ $status_stop -eq 0 ]; then
                sleep 1
                let count=$count+1;
            else
                break
            fi
        done
        
        do_check_status
        status_stop=$?

        if [ $status_stop -eq 0 ]; then
            kill -9 $kpid
        fi

        echo "OK"
    elif [ $status_stop -eq 1 ]; then
        echo "$KARAF_SERVICE_NAME dead but pid file exists, cleaning up"
    elif [ $status_stop -eq 3 ]; then
        echo "$KARAF_SERVICE_NAME is already stopped"
    fi

    rm -f "$KARAF_SERVICE_PIDFILE"
}

do_status() {
    do_check_status
    status=$?
    if [ $status -eq 0 ]; then
        read pid < $KARAF_SERVICE_PIDFILE
        echo "$KARAF_SERVICE_NAME is running with pid $pid"
        exit 0
    elif [ $status -eq 1 ]; then
        echo "$KARAF_SERVICE_NAME is not running and the pid file exists"
        exit 1
    elif [ $status -eq 3 ]; then
        echo "$KARAF_SERVICE_NAME is not running"
        exit 3
    else
        echo "Unable to determine $KARAF_SERVICE_NAME status"
        exit 4
    fi
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart)
        do_stop
        do_start
        ;;
    status)
        do_status
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
        ;;
esac
