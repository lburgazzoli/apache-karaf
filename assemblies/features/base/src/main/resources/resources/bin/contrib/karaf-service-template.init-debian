#!/bin/sh
#    Licensed to the Apache Software Foundation (ASF) under one or more
#    contributor license agreements.  See the NOTICE file distributed with
#    this work for additional information regarding copyright ownership.
#    The ASF licenses this file to You under the Apache License, Version 2.0
#    (the "License"); you may not use this file except in compliance with
#    the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# /etc/init.d/${KARAF_SERVICE_NAME} -- startup script for Karaf
#
#
### BEGIN INIT INFO
# Provides:             ${KARAF_SERVICE_NAME}
# Required-Start:       $remote_fs $network
# Required-Stop:        $remote_fs $network
# Should-Start:         $named
# Should-Stop:          $named
# Default-Start:        2 3 4 5
# Default-Stop:         0 1 6
# Short-Description:    Karaf
# Description:          Provide Karaf startup/shutdown script
### END INIT INFO

# Check privileges
if [ `id -u` -ne 0 ]; then
    echo "You need root privileges to run this script"
    exit 1
fi

# Make sure karaf is started with system locale
if [ -r /etc/default/locale ]; then
    . /etc/default/locale
    export LANG
fi

. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
    . /etc/default/rcS
fi

if [ -r "${KARAF_SERVICE_CONF}" ]; then
    set -o allexport
    . "${KARAF_SERVICE_CONF}"
    set +o allexport
else
    echo "Error KARAF_SERVICE_CONF not defined"
    exit -1
fi

# Location of JDK
if [ -n "$JAVA_HOME" ]; then
    export JAVA_HOME
fi

# Setup the JVM
if [ -z "$JAVA" ]; then
    if [ -n "$JAVA_HOME" ]; then
        JAVA="$JAVA_HOME/bin/java"
    else
        JAVA="java"
    fi
fi

# Check karaf user
id $KARAF_SERVICE_USER > /dev/null 2>&1
if [ $? -ne 0 -o -z "$KARAF_SERVICE_USER" ]; then
    echo "User \"$KARAF_SERVICE_USER\" does not exist..." >&2
    exit 1
fi

# Check owner of KARAF_SERVICE_PATH
if [ ! $(stat -L -c "%U" "$KARAF_SERVICE_PATH") = $KARAF_SERVICE_USER ]; then
    echo "The user \"$KARAF_SERVICE_USER\" is not owner of \"$KARAF_SERVICE_PATH\"" >&2
    exit 1
fi

# The amount of time to wait for startup
if [ -z "$STARTUP_WAIT" ]; then
    STARTUP_WAIT=30
fi

# The amount of time to wait for shutdown
if [ -z "$SHUTDOWN_WAIT" ]; then
    SHUTDOWN_WAIT=30
fi


# Helper function to check status of karaf service
do_check_status() {
    pidofproc -p "$KARAF_SERVICE_PIDFILE" "$JAVA" >/dev/null 2>&1
}

do_start() {
    log_daemon_msg "Starting Karaf" "$KARAF_SERVICE_NAME"

    do_check_status
    status_start=$?

    if [ $status_start -eq 3 ]; then
        # Console log
        LOG_PATH=$(dirname "$KARAF_SERVICE_LOG")
        if [ ! -d "$LOG_PATH" ]; then
            mkdir -p "$LOG_PATH"

            chown $KARAF_SERVICE_USER:$KARAF_SERVICE_GROUP "$LOG_PATH"
            chown $KARAF_SERVICE_USER:$KARAF_SERVICE_GROUP "$KARAF_SERVICE_LOG"
        fi

        start-stop-daemon \
            --start \
            --user "$KARAF_SERVICE_USER" \
            --chuid "$KARAF_SERVICE_USER" \
            --chdir "$KARAF_SERVICE_PATH" \
            --pidfile "$KARAF_SERVICE_PIDFILE" \
            --exec "$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_START_COMMAND"

        count=0
        kwait=$STARTUP_WAIT
        launched=0

        # Waith untill the process has been started, max STARTUP_WAIT seconds
        while [ $count -lt $kwait ] && [ $launched -eq 0 ]; do
            do_check_status
            status_start=$?

            if [ $status_start -eq 3 ]; then
                sleep 1
                count=$((count + 1));
            elif [ $status_start -eq 0 ]; then
                launched=1
            fi
        done

        do_check_status
        status_start=$?

        if [ $status_start -eq 0 ]; then
            log_end_msg 0
        else
            log_end_msg 1
        fi

        if [ $launched -eq 0 ]; then
            log_warning_msg "$KARAF_SERVICE_NAME hasn't started within the timeout allowed"
            log_warning_msg "please review file \"$KARAF_SERVICE_LOG\" to see the status of the service"
        fi
    else
        $0 status
    fi
}

do_stop() {
    log_daemon_msg "Stopping Karaf" $KARAF_SERVICE_NAME

    do_check_status
    status_stop=$?

    if [ $status_stop -eq 0 ]; then
        su - $KARAF_SERVICE_USER \
            -c "export JAVA_HOME=$JAVA_HOME; \"$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_STOP_COMMAND\" " \
        >> /dev/null 2>&1

        count=0
        kwait=$SHUTDOWN_WAIT

        # Waith untill the process has been stopped, max SHUTDOWN_WAIT seconds
        while [ $count -lt $kwait ];  do
            do_check_status
            status_stop=$?

            if [ $status_stop -eq 0 ]; then
                sleep 1
                count=$((count + 1));
            else 
                break
            fi
        done

        do_check_status
        status_stop=$?

        if [ $status_stop -eq 0 ]; then
            start-stop-daemon \
                --stop \
                --quiet \
                --pidfile "$KARAF_SERVICE_PIDFILE" \
                --user "$KARAF_SERVICE_USER" \
                --retry=TERM/$SHUTDOWN_WAIT/KILL/5 \
            > /dev/null 2>&1

            if [ $? -eq 2 ]; then
                log_failure_msg "$KARAF_SERVICE_NAME can't be stopped"
                exit 1
            fi
        fi

        log_end_msg 0

        rm -rf "$KARAF_SERVICE_PIDFILE"
    elif [ $status_stop -eq 1 ]; then
        log_end_msg 0
        log_action_msg "$KARAF_SERVICE_NAME is not running but the pid file exists, cleaning up"
        rm -f "$KARAF_SERVICE_PIDFILE"
    elif [ $status_stop -eq 3 ]; then
        log_end_msg 0
        log_action_msg "$KARAF_SERVICE_NAME is not running"
    fi
}

do_restart() {
    do_check_status
    status_restart=$?

    if [ $status_restart -ne 3 ]; then
        $0 stop
    fi

    $0 start
}

do_status() {
    do_check_status
    status=$?
    if [ $status -eq 0 ]; then
        read pid < $KARAF_SERVICE_PIDFILE
        log_action_msg "$KARAF_SERVICE_NAME is running with pid $pid"
        exit 0
    elif [ $status -eq 1 ]; then
        log_action_msg "$KARAF_SERVICE_NAME is not running and the pid file exists"
        exit 1
    elif [ $status -eq 3 ]; then
        log_action_msg "$KARAF_SERVICE_NAME is not running"
        exit 3
    else
        log_action_msg "Unable to determine $KARAF_SERVICE_NAME status"
        exit 4
    fi
}

case "$1" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    restart)
        do_stop
        do_start
        ;;
    status)
        do_status
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        log_action_msg "Usage: $0 {start|stop|restart|status}"
         exit 2
        ;;
esac

exit 0
